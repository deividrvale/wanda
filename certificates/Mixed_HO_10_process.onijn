YES

  Signature: [

    delta : [] --> proc ;
    plus : [proc * proc] --> proc ;
    sigma : [data -> proc] --> proc ;
    times : [proc * proc] --> proc ;
    AP1 : [data -> proc * data] --> proc
]

  Rules: [

    plus(X, X) => X ;
    times(plus(X, Y), Z) => plus(times(X, Z), times(Y, Z)) ;
    times(times(X, Y), Z) => times(X, times(Y, Z)) ;
    plus(X, delta) => X ;
    times(delta, X) => delta ;
    sigma(/\x.X) => X ;
    plus(sigma(/\x.AP1(F, x)), AP1(F, X)) => sigma(/\y.AP1(F, y)) ;
    sigma(/\x.plus(AP1(F, x), AP1(G, x))) => plus(sigma(/\y.AP1(F, y)), sigma(/\z.AP1(G, z))) ;
    times(sigma(/\x.AP1(F, x)), X) => sigma(/\y.times(AP1(F, y), X)) ;
    AP1(F, X) => F X
]

  Interpretation: [

    J(delta) = 3 ;
    J(plus) = Lam[y0;y1].3 ;
    J(sigma) = Lam[G0].2 + 3*G0(0) ;
    J(times) = Lam[y0;y1].1 + 2*y0*y1 + 3*y0 ;
    J(AP1) = Lam[G0;y1].1 + 3*y1 + G0(y1) + 3*y1*G0(y1)

  ]

(**

  [[plus(_x0, _x0)]] = 3 + 2*x0 > x0 = [[_x0]]
  [[times(plus(_x0, _x1), _x2)]] = 13 + 2*x0*x2 + 2*x1*x2 + 4*x0 + 4*x1 + 7*x2 > 5 + 2*x0*x2 + 2*x1*x2 + 2*x2 + 4*x0 + 4*x1 = [[plus(times(_x0, _x2), times(_x1, _x2))]]
  [[times(times(_x0, _x1), _x2)]] = 5 + 2*x1*x2 + 3*x2 + 4*x0*x1*x2 + 4*x1 + 8*x0*x1 + 8*x0*x2 + 16*x0 > 2 + x2 + 2*x0*x2 + 2*x1*x2 + 4*x0*x1*x2 + 4*x1 + 6*x0 + 8*x0*x1 = [[times(_x0, times(_x1, _x2))]]
  [[plus(_x0, delta)]] = 6 + x0 > x0 = [[_x0]]
  [[times(delta, _x0)]] = 13 + 7*x0 > 3 = [[delta]]
  [[sigma(/\x._x0)]] = 2 + 4*x0 > x0 = [[_x0]]
  [[plus(sigma(/\x.AP1(_F0, x)), AP1(_F0, _x1))]] = 10 + 4*x1 + F0(x1) + 3*x1*F0(x1) + 9*F0(0) > 6 + 8*F0(0) = [[sigma(/\x.AP1(_F0, x))]]
  [[sigma(/\x.plus(AP1(_F0, x), AP1(_F1, x)))]] = 22 + 8*F0(0) + 8*F1(0) > 15 + 8*F0(0) + 8*F1(0) = [[plus(sigma(/\x.AP1(_F0, x)), sigma(/\y.AP1(_F1, y)))]]
  [[times(sigma(/\x.AP1(_F0, x)), _x1)]] = 25 + 13*x1 + 16*x1*F0(0) + 32*F0(0) > 22 + 12*x1 + 16*x1*F0(0) + 32*F0(0) = [[sigma(/\x.times(AP1(_F0, x), _x1))]]
  [[AP1(_F0, _x1)]] = 1 + 4*x1 + F0(0) + F0(x1) + 3*x1*F0(x1) > x1 + F0(x1) = [[_F0 _x1]]

**)

Removed: [

  plus(X, X) => X ;
  times(plus(X, Y), Z) => plus(times(X, Z), times(Y, Z)) ;
  times(times(X, Y), Z) => times(X, times(Y, Z)) ;
  plus(X, delta) => X ;
  times(delta, X) => delta ;
  sigma(/\x.X) => X ;
  plus(sigma(/\x.AP1(F, x)), AP1(F, X)) => sigma(/\y.AP1(F, y)) ;
  sigma(/\x.plus(AP1(F, x), AP1(G, x))) => plus(sigma(/\y.AP1(F, y)), sigma(/\z.AP1(G, z))) ;
  times(sigma(/\x.AP1(F, x)), X) => sigma(/\y.times(AP1(F, y), X)) ;
  AP1(F, X) => F X

]

