YES
  Signature: [

    cons : [c * d] --> d ; 
    f : [a] --> a ; 
    false : [] --> b ; 
    filter : [c -> b * d] --> d ; 
    filter2 : [b * c -> b * c * d] --> d ; 
    g : [a] --> a ; 
    map : [c -> c * d] --> d ; 
    nil : [] --> d ; 
    true : [] --> b 

  ]

  Rules: [

    f(g(x)) => g(g(f(x))) ; 
    f(g(x)) => g(g(g(x))) ; 
    map(h, nil) => nil ; 
    map(h, cons(x, y)) => cons(h x, map(h, y)) ; 
    filter(h, nil) => nil ; 
    filter(h, cons(x, y)) => filter2(h x, h, x, y) ; 
    filter2(true, h, x, y) => cons(x, filter(h, y)) ; 
    filter2(false, h, x, y) => filter(h, y) 

  ]

(** This AFS is converted to an AFSM simply by replacINg all free variables by meta-variables (with arity 0). **) 

 

  Interpretation: [

    J(cons) = Lam[y0;y1].3 + 3*y0 ; 
    J(f) = Lam[y0].3 + 2*y0 ; 
    J(false) = 3 ; 
    J(filter) = Lam[G0;y1].3*y1 + 3*y1*G0(y1) + 3*G0(y1) ; 
    J(filter2) = Lam[y0;G1;y2;y3].3 + 3*y2 + 3*y3 + G1(0) + 3*y3*G1(y3) + 3*G1(y2) + 3*G1(y3) ; 
    J(g) = Lam[y0].1 ; 
    J(map) = Lam[G0;y1].3*y1 + 2*G0(y1) + 3*y1*G0(y1) ; 
    J(nil) = 3 ; 
    J(true) = 3 

  ]

(**

  [[f(g(_x0))]] = 6 + 3*x0 > 5 + 3*x0 = [[g(g(f(_x0)))]] 
  [[f(g(_x0))]] = 6 + 3*x0 > 3 + x0 = [[g(g(g(_x0)))]] 
  [[map(_F0, nil)]] = 12 + F0(0) + 11*F0(3) > 3 = [[nil]] 
  [[map(_F0, cons(_x1, _x2))]] = 12 + 4*x2 + 16*x1 + F0(0) + 3*x2*F0(3 + x2 + 4*x1) + 11*F0(3 + x2 + 4*x1) + 12*x1*F0(3 + x2 + 4*x1) > 3 + 4*x1 + 4*x2 + F0(0) + 2*F0(x2) + 3*x2*F0(x2) + 4*F0(x1) = [[cons(_F0 _x1, map(_F0, _x2))]] 
  [[filter(_F0, nil)]] = 12 + F0(0) + 12*F0(3) > 3 = [[nil]] 
  [[filter(_F0, cons(_x1, _x2))]] = 12 + 4*x2 + 16*x1 + F0(0) + 3*x2*F0(3 + x2 + 4*x1) + 12*x1*F0(3 + x2 + 4*x1) + 12*F0(3 + x2 + 4*x1) > 3 + 4*x2 + 5*x1 + 2*F0(0) + 3*x2*F0(x2) + 3*F0(x2) + 4*F0(x1) = [[filter2(_F0 _x1, _F0, _x1, _x2)]] 
  [[filter2(true, _F0, _x1, _x2)]] = 6 + 4*x1 + 4*x2 + 2*F0(0) + 3*x2*F0(x2) + 3*F0(x1) + 3*F0(x2) > 3 + 4*x1 + 4*x2 + F0(0) + 3*x2*F0(x2) + 3*F0(x2) = [[cons(_x1, filter(_F0, _x2))]] 
  [[filter2(false, _F0, _x1, _x2)]] = 6 + 4*x1 + 4*x2 + 2*F0(0) + 3*x2*F0(x2) + 3*F0(x1) + 3*F0(x2) > 4*x2 + F0(0) + 3*x2*F0(x2) + 3*F0(x2) = [[filter(_F0, _x2)]] 

**)

Removed: [

  f(g(X)) => g(g(f(X))) ; 
  f(g(X)) => g(g(g(X))) ; 
  map(F, nil) => nil ; 
  map(F, cons(X, Y)) => cons(F X, map(F, Y)) ; 
  filter(F, nil) => nil ; 
  filter(F, cons(X, Y)) => filter2(F X, F, X, Y) ; 
  filter2(true, F, X, Y) => cons(X, filter(F, Y)) ; 
  filter2(false, F, X, Y) => filter(F, Y) 

]

