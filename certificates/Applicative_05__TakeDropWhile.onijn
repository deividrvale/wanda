YES
  Signature: [

    cons : [a * c] --> c ; 
    dropWhile : [a -> b * c] --> c ; 
    IF : [b * c * c] --> c ; 
    nil : [] --> c ; 
    takeWhile : [a -> b * c] --> c ; 
    true : [] --> b 

  ]

  Rules: [

    IF(true, x, y) => x ; 
    IF(true, x, y) => y ; 
    takeWhile(f, nil) => nil ; 
    takeWhile(f, cons(x, y)) => IF(f x, cons(x, takeWhile(f, y)), nil) ; 
    dropWhile(f, nil) => nil ; 
    dropWhile(f, cons(x, y)) => IF(f x, dropWhile(f, y), cons(x, y)) 

  ]

(** This AFS is converted to an AFSM simply by replacINg all free variables by meta-variables (with arity 0). **) 

 

  Interpretation: [

    J(cons) = Lam[y0;y1].2 + 2*y0*y1 + 3*y0 + 3*y1 ; 
    J(dropWhile) = Lam[G0;y1].3 + 3*y1 + 2*y1*G0(y1) ; 
    J(IF) = Lam[y0;y1;y2].0 ; 
    J(nil) = 1 ; 
    J(takeWhile) = Lam[G0;y1].2*y1 + 3*y1*G0(y1) ; 
    J(true) = 3 

  ]

(**

  [[IF(true, _x0, _x1)]] = 3 + x0 + x1 > x0 = [[_x0]] 
  [[IF(true, _x0, _x1)]] = 3 + x0 + x1 > x1 = [[_x1]] 
  [[takeWhile(_F0, nil)]] = 3 + F0(0) + 3*F0(1) > 1 = [[nil]] 
  [[takeWhile(_F0, cons(_x1, _x2))]] = 6 + 6*x1*x2 + 12*x1 + 12*x2 + F0(0) + 6*x1*x2*F0(2 + 2*x1*x2 + 4*x1 + 4*x2) + 6*F0(2 + 2*x1*x2 + 4*x1 + 4*x2) + 12*x1*F0(2 + 2*x1*x2 + 4*x1 + 4*x2) + 12*x2*F0(2 + 2*x1*x2 + 4*x1 + 4*x2) > 3 + 5*x1 + 6*x1*x2 + 12*x2 + F0(x1) + 2*x1*F0(0) + 4*F0(0) + 6*x1*x2*F0(x2) + 12*x2*F0(x2) = [[IF(_F0 _x1, cons(_x1, takeWhile(_F0, _x2)), nil)]] 
  [[dropWhile(_F0, nil)]] = 7 + F0(0) + 2*F0(1) > 1 = [[nil]] 
  [[dropWhile(_F0, cons(_x1, _x2))]] = 11 + 8*x1*x2 + 16*x1 + 16*x2 + F0(0) + 4*x1*x2*F0(2 + 2*x1*x2 + 4*x1 + 4*x2) + 4*F0(2 + 2*x1*x2 + 4*x1 + 4*x2) + 8*x1*F0(2 + 2*x1*x2 + 4*x1 + 4*x2) + 8*x2*F0(2 + 2*x1*x2 + 4*x1 + 4*x2) > 5 + 2*x1*x2 + 5*x1 + 8*x2 + F0(0) + F0(x1) + 2*x2*F0(x2) = [[IF(_F0 _x1, dropWhile(_F0, _x2), cons(_x1, _x2))]] 

**)

Removed: [

  IF(true, X, Y) => X ; 
  IF(true, X, Y) => Y ; 
  takeWhile(F, nil) => nil ; 
  takeWhile(F, cons(X, Y)) => IF(F X, cons(X, takeWhile(F, Y)), nil) ; 
  dropWhile(F, nil) => nil ; 
  dropWhile(F, cons(X, Y)) => IF(F X, dropWhile(F, Y), cons(X, Y)) 

]

