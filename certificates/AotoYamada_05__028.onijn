YES
  Signature: [

    cons : [a * c] --> c ; 
    consIF : [b * a * c] --> c ; 
    false : [] --> b ; 
    filter : [a -> b * c] --> c ; 
    nil : [] --> c ; 
    true : [] --> b 

  ]

  Rules: [

    consIF(true, x, y) => cons(x, y) ; 
    consIF(false, x, y) => y ; 
    filter(f, nil) => nil ; 
    filter(f, cons(x, y)) => consIF(f x, x, filter(f, y)) 

  ]

(** This AFS is converted to an AFSM simply by replacINg all free variables by meta-variables (with arity 0). **) 

 

  Interpretation: [

    J(cons) = Lam[y0;y1].2 + 2*y0 + 2*y1 + 3*y0*y1 ; 
    J(consIF) = Lam[y0;y1;y2].2*y1 + 2*y2 + 3*y1*y2 ; 
    J(false) = 3 ; 
    J(filter) = Lam[G0;y1].3*y1 + 2*y1*G0(y1) ; 
    J(nil) = 3 ; 
    J(true) = 3 

  ]

(**

  [[consIF(true, _x0, _x1)]] = 3 + 3*x0 + 3*x0*x1 + 3*x1 > 2 + 3*x0 + 3*x0*x1 + 3*x1 = [[cons(_x0, _x1)]] 
  [[consIF(false, _x0, _x1)]] = 3 + 3*x0 + 3*x0*x1 + 3*x1 > x1 = [[_x1]] 
  [[filter(_F0, nil)]] = 12 + F0(0) + 6*F0(3) > 3 = [[nil]] 
  [[filter(_F0, cons(_x1, _x2))]] = 8 + 12*x1 + 12*x1*x2 + 12*x2 + F0(0) + 4*F0(2 + 3*x1 + 3*x1*x2 + 3*x2) + 6*x1*x2*F0(2 + 3*x1 + 3*x1*x2 + 3*x2) + 6*x1*F0(2 + 3*x1 + 3*x1*x2 + 3*x2) + 6*x2*F0(2 + 3*x1 + 3*x1*x2 + 3*x2) > 4*x1 + 12*x1*x2 + 12*x2 + F0(x1) + 3*x1*F0(0) + 3*F0(0) + 6*x1*x2*F0(x2) + 6*x2*F0(x2) = [[consIF(_F0 _x1, _x1, filter(_F0, _x2))]] 

**)

Removed: [

  consIF(true, X, Y) => cons(X, Y) ; 
  consIF(false, X, Y) => Y ; 
  filter(F, nil) => nil ; 
  filter(F, cons(X, Y)) => consIF(F X, X, filter(F, Y)) 

]

