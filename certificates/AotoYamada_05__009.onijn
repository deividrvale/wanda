YES
  Signature: [

    and : [c * c] --> c ; 
    cons : [a * b] --> b ; 
    false : [] --> c ; 
    FORALL : [a -> c * b] --> c ; 
    forsome : [a -> c * b] --> c ; 
    nil : [] --> b ; 
    or : [c * c] --> c ; 
    true : [] --> c 

  ]

  Rules: [

    and(true, true) => true ; 
    and(true, false) => false ; 
    and(false, true) => false ; 
    and(false, false) => false ; 
    or(true, true) => true ; 
    or(true, false) => true ; 
    or(false, true) => true ; 
    or(false, false) => false ; 
    FORALL(f, nil) => true ; 
    FORALL(f, cons(x, y)) => and(f x, FORALL(f, y)) ; 
    forsome(f, nil) => false ; 
    forsome(f, cons(x, y)) => or(f x, forsome(f, y)) 

  ]

(** This AFS is converted to an AFSM simply by replacINg all free variables by meta-variables (with arity 0). **) 

 

  Interpretation: [

    J(and) = Lam[y0;y1].0 ; 
    J(cons) = Lam[y0;y1].3 + 3*y0 + 3*y0*y1 + 3*y1 ; 
    J(false) = 3 ; 
    J(FORALL) = Lam[G0;y1].2*y1 + 3*y1*G0(y1) ; 
    J(forsome) = Lam[G0;y1].2*y1 + 2*G0(y1) + 3*y1*G0(y1) ; 
    J(nil) = 3 ; 
    J(or) = Lam[y0;y1].0 ; 
    J(true) = 1 

  ]

(**

  [[and(true, true)]] = 2 > 1 = [[true]] 
  [[and(true, false)]] = 4 > 3 = [[false]] 
  [[and(false, true)]] = 4 > 3 = [[false]] 
  [[and(false, false)]] = 6 > 3 = [[false]] 
  [[or(true, true)]] = 2 > 1 = [[true]] 
  [[or(true, false)]] = 4 > 1 = [[true]] 
  [[or(false, true)]] = 4 > 1 = [[true]] 
  [[or(false, false)]] = 6 > 3 = [[false]] 
  [[FORALL(_F0, nil)]] = 9 + F0(0) + 9*F0(3) > 1 = [[true]] 
  [[FORALL(_F0, cons(_x1, _x2))]] = 9 + 9*x1*x2 + 12*x1 + 12*x2 + F0(0) + 9*x1*x2*F0(3 + 3*x1*x2 + 4*x1 + 4*x2) + 9*F0(3 + 3*x1*x2 + 4*x1 + 4*x2) + 12*x1*F0(3 + 3*x1*x2 + 4*x1 + 4*x2) + 12*x2*F0(3 + 3*x1*x2 + 4*x1 + 4*x2) > x1 + 3*x2 + F0(0) + F0(x1) + 3*x2*F0(x2) = [[and(_F0 _x1, FORALL(_F0, _x2))]] 
  [[forsome(_F0, nil)]] = 9 + F0(0) + 11*F0(3) > 3 = [[false]] 
  [[forsome(_F0, cons(_x1, _x2))]] = 9 + 9*x1*x2 + 12*x1 + 12*x2 + F0(0) + 9*x1*x2*F0(3 + 3*x1*x2 + 4*x1 + 4*x2) + 11*F0(3 + 3*x1*x2 + 4*x1 + 4*x2) + 12*x1*F0(3 + 3*x1*x2 + 4*x1 + 4*x2) + 12*x2*F0(3 + 3*x1*x2 + 4*x1 + 4*x2) > x1 + 3*x2 + F0(0) + F0(x1) + 2*F0(x2) + 3*x2*F0(x2) = [[or(_F0 _x1, forsome(_F0, _x2))]] 

**)

Removed: [

  and(true, true) => true ; 
  and(true, false) => false ; 
  and(false, true) => false ; 
  and(false, false) => false ; 
  or(true, true) => true ; 
  or(true, false) => true ; 
  or(false, true) => true ; 
  or(false, false) => false ; 
  FORALL(F, nil) => true ; 
  FORALL(F, cons(X, Y)) => and(F X, FORALL(F, Y)) ; 
  forsome(F, nil) => false ; 
  forsome(F, cons(X, Y)) => or(F X, forsome(F, Y)) 

]

