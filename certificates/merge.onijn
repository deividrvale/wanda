YES
  Signature: [

    cons : [nat * list] --> list ; 
    map : [nat -> nat * list] --> list ; 
    merge : [list * list * list] --> list ; 
    nil : [] --> list 

  ]

  Rules: [

    merge(nil, nil, x) => x ; 
    merge(nil, cons(x, y), z) => merge(y, nil, cons(x, z)) ; 
    merge(cons(x, y), z, u) => merge(z, y, cons(x, u)) ; 
    map(f, nil) => nil ; 
    map(f, cons(x, y)) => cons(f x, map(f, y)) 

  ]

(** This AFS is converted to an AFSM simply by replacINg all free variables by meta-variables (with arity 0). **) 

 

  Interpretation: [

    J(cons) = Lam[y0;y1].2 + y0 ; 
    J(map) = Lam[G0;y1].3 + 3*y1 + G0(y1) + 2*y1*G0(y1) ; 
    J(merge) = Lam[y0;y1;y2].3 + 3*y0 + 3*y0*y1 + 3*y1 ; 
    J(nil) = 2 

  ]

(**

  [[merge(nil, nil, _x0)]] = 31 + x0 > x0 = [[_x0]] 
  [[merge(nil, cons(_x0, _x1), _x2)]] = 31 + x2 + 10*x1 + 20*x0 > 13 + x2 + 2*x0 + 10*x1 = [[merge(_x1, nil, cons(_x0, _x2))]] 
  [[merge(cons(_x0, _x1), _x2, _x3)]] = 11 + x3 + 3*x1*x2 + 4*x1 + 6*x0*x2 + 8*x0 + 10*x2 > 5 + x3 + 2*x0 + 3*x1*x2 + 4*x1 + 4*x2 = [[merge(_x2, _x1, cons(_x0, _x3))]] 
  [[map(_F0, nil)]] = 11 + F0(0) + 5*F0(2) > 2 = [[nil]] 
  [[map(_F0, cons(_x1, _x2))]] = 11 + 4*x2 + 8*x1 + F0(0) + 2*x2*F0(2 + x2 + 2*x1) + 4*x1*F0(2 + x2 + 2*x1) + 5*F0(2 + x2 + 2*x1) > 5 + 2*x1 + 4*x2 + F0(0) + F0(x2) + 2*x2*F0(x2) + 2*F0(x1) = [[cons(_F0 _x1, map(_F0, _x2))]] 

**)

Removed: [

  merge(nil, nil, X) => X ; 
  merge(nil, cons(X, Y), Z) => merge(Y, nil, cons(X, Z)) ; 
  merge(cons(X, Y), Z, U) => merge(Z, Y, cons(X, U)) ; 
  map(F, nil) => nil ; 
  map(F, cons(X, Y)) => cons(F X, map(F, Y)) 

]

