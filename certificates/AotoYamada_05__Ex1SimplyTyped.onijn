YES
  Signature: [

    add : [a] --> a -> a ; 
    cons : [b * c] --> c ; 
    id : [] --> a -> a ; 
    map : [b -> b * c] --> c ; 
    nil : [] --> c ; 
    s : [a] --> a ; 
    zero : [] --> a 

  ]

  Rules: [

    id x => x ; 
    add(zero) => id ; 
    add(s(x)) y => s(add(x) y) ; 
    map(f, nil) => nil ; 
    map(f, cons(x, y)) => cons(f x, map(f, y)) 

  ]

(** This AFS is converted to an AFSM simply by replacINg all free variables by meta-variables (with arity 0). **) 

 

  Interpretation: [

    J(add) = Lam[y0;y1].3 + 3*y0 + 3*y0*y1 + 3*y1 ; 
    J(cons) = Lam[y0;y1].3 + 2*y1 ; 
    J(id) = Lam[y0].1 + 3*y0 ; 
    J(map) = Lam[G0;y1].3*y1 + 3*y1*G0(y1) ; 
    J(nil) = 3 ; 
    J(s) = Lam[y0].3 ; 
    J(zero) = 3 

  ]

(**

  [[id _x0]] = 1 + 4*x0 > x0 = [[_x0]] 
  [[add(zero)]] = Lam[y0].15 + 12*y0 > Lam[y0].1 + 3*y0 = [[id]] 
  [[add(s(_x0)) _x1]] = 15 + 3*x0*x1 + 4*x0 + 13*x1 > 6 + 3*x0*x1 + 4*x0 + 4*x1 = [[s(add(_x0) _x1)]] 
  [[map(_F0, nil)]] = 12 + F0(0) + 9*F0(3) > 3 = [[nil]] 
  [[map(_F0, cons(_x1, _x2))]] = 12 + 4*x1 + 12*x2 + F0(0) + 3*x1*F0(3 + x1 + 3*x2) + 9*x2*F0(3 + x1 + 3*x2) + 9*F0(3 + x1 + 3*x2) > 3 + x1 + 12*x2 + F0(x1) + 3*F0(0) + 9*x2*F0(x2) = [[cons(_F0 _x1, map(_F0, _x2))]] 

**)

Removed: [

  id X => X ; 
  add(zero) => id ; 
  add(s(X)) Y => s(add(X) Y) ; 
  map(F, nil) => nil ; 
  map(F, cons(X, Y)) => cons(F X, map(F, Y)) 

]

