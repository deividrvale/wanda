YES
  Signature: [

    cons : [c * b] --> b ; 
    map : [c -> c * b] --> b ; 
    nil : [] --> b ; 
    node : [a * b] --> c ; 
    plus : [c * c] --> c ; 
    s : [c] --> c ; 
    size : [] --> c -> c ; 
    sum : [b] --> c ; 
    zero : [] --> c 

  ]

  Rules: [

    map(f, nil) => nil ; 
    map(f, cons(x, y)) => cons(f x, map(f, y)) ; 
    sum(cons(x, y)) => plus(x, sum(y)) ; 
    size node(x, y) => s(sum(map(size, y))) ; 
    plus(zero, x) => zero ; 
    plus(s(x), y) => s(plus(x, y)) 

  ]

(** This AFS is converted to an AFSM simply by replacINg all free variables by meta-variables (with arity 0). **) 

 

  Interpretation: [

    J(cons) = Lam[y0;y1].3 ; 
    J(map) = Lam[G0;y1].y1 + G0(y1) + 3*y1*G0(y1) ; 
    J(nil) = 3 ; 
    J(node) = Lam[y0;y1].3 + 3*y1 ; 
    J(plus) = Lam[y0;y1].y0 ; 
    J(s) = Lam[y0].1 ; 
    J(size) = Lam[y0].0 ; 
    J(sum) = Lam[y0].y0 ; 
    J(zero) = 3 

  ]

(**

  [[map(_F0, nil)]] = 6 + F0(0) + 10*F0(3) > 3 = [[nil]] 
  [[map(_F0, cons(_x1, _x2))]] = 6 + 2*x1 + 2*x2 + F0(0) + 3*x1*F0(3 + x1 + x2) + 3*x2*F0(3 + x1 + x2) + 10*F0(3 + x1 + x2) > 3 + x1 + 2*x2 + F0(0) + F0(x1) + F0(x2) + 3*x2*F0(x2) = [[cons(_F0 _x1, map(_F0, _x2))]] 
  [[sum(cons(_x0, _x1))]] = 6 + 2*x0 + 2*x1 > 2*x0 + 2*x1 = [[plus(_x0, sum(_x1))]] 
  [[size node(_x0, _x1)]] = 3 + x0 + 4*x1 > 1 + 4*x1 = [[s(sum(map(size, _x1)))]] 
  [[plus(zero, _x0)]] = 6 + x0 > 3 = [[zero]] 
  [[plus(s(_x0), _x1)]] = 2 + x1 + 2*x0 > 1 + x1 + 2*x0 = [[s(plus(_x0, _x1))]] 

**)

Removed: [

  map(F, nil) => nil ; 
  map(F, cons(X, Y)) => cons(F X, map(F, Y)) ; 
  sum(cons(X, Y)) => plus(X, sum(Y)) ; 
  size node(X, Y) => s(sum(map(size, Y))) ; 
  plus(zero, X) => zero ; 
  plus(s(X), Y) => s(plus(X, Y)) 

]

