YES
  Signature: [

    append : [b * b] --> b ; 
    cons : [a * b] --> b ; 
    map : [a -> a * b] --> b ; 
    nil : [] --> b 

  ]

  Rules: [

    append(nil, x) => x ; 
    append(cons(x, y), z) => cons(x, append(y, z)) ; 
    map(f, nil) => nil ; 
    map(f, cons(x, y)) => cons(f x, map(f, y)) ; 
    append(append(x, y), z) => append(x, append(y, z)) ; 
    map(f, append(x, y)) => append(map(f, x), map(f, y)) 

  ]

(** This AFS is converted to an AFSM simply by replacINg all free variables by meta-variables (with arity 0). **) 

 

  Interpretation: [

    J(append) = Lam[y0;y1].3 + 2*y0 ; 
    J(cons) = Lam[y0;y1].3 ; 
    J(map) = Lam[G0;y1].3*y1 + 3*y1*G0(y1) ; 
    J(nil) = 3 

  ]

(**

  [[append(nil, _x0)]] = 12 + x0 > x0 = [[_x0]] 
  [[append(cons(_x0, _x1), _x2)]] = 12 + x2 + 3*x0 + 3*x1 > 6 + x0 + x2 + 3*x1 = [[cons(_x0, append(_x1, _x2))]] 
  [[map(_F0, nil)]] = 12 + F0(0) + 9*F0(3) > 3 = [[nil]] 
  [[map(_F0, cons(_x1, _x2))]] = 12 + 4*x1 + 4*x2 + F0(0) + 3*x1*F0(3 + x1 + x2) + 3*x2*F0(3 + x1 + x2) + 9*F0(3 + x1 + x2) > 3 + x1 + 4*x2 + F0(0) + F0(x1) + 3*x2*F0(x2) = [[cons(_F0 _x1, map(_F0, _x2))]] 
  [[append(append(_x0, _x1), _x2)]] = 12 + x2 + 3*x1 + 9*x0 > 6 + x2 + 3*x0 + 3*x1 = [[append(_x0, append(_x1, _x2))]] 
  [[map(_F0, append(_x1, _x2))]] = 12 + 4*x2 + 12*x1 + F0(0) + 3*x2*F0(3 + x2 + 3*x1) + 9*x1*F0(3 + x2 + 3*x1) + 9*F0(3 + x2 + 3*x1) > 3 + 4*x2 + 12*x1 + 3*x2*F0(x2) + 4*F0(0) + 9*x1*F0(x1) = [[append(map(_F0, _x1), map(_F0, _x2))]] 

**)

Removed: [

  append(nil, X) => X ; 
  append(cons(X, Y), Z) => cons(X, append(Y, Z)) ; 
  map(F, nil) => nil ; 
  map(F, cons(X, Y)) => cons(F X, map(F, Y)) ; 
  append(append(X, Y), Z) => append(X, append(Y, Z)) ; 
  map(F, append(X, Y)) => append(map(F, X), map(F, Y)) 

]

