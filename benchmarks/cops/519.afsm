not :  (bool -> bool)
true :  bool
false :  bool
fold :  ((bool -> bool) -> ((bool -> bool) -> (bool -> (string -> bool))))
nil :  string
0 :  (string -> string)
1 :  (string -> string)

not true => false
not false => true
fold (/\x. F[x]) (/\x. G[x]) z nil => z
fold (/\x. F[x]) (/\x. G[x]) z (0 y) => fold (/\x. F[x]) (/\x. G[x]) (F[z]) y
fold (/\x. F[x]) (/\x. G[x]) z (1 y) => fold (/\x. F[x]) (/\x. G[x]) (G[z]) y
