YES

  Signature: [

    and : [form * form] --> form ;
    EXISTS : [form -> form] --> form ;
    FORALL : [form -> form] --> form ;
    not : [form] --> form ;
    or : [form * form] --> form ;
    AP1 : [form -> form * form] --> form
]

  Rules: [

    and(X, FORALL(/\x.AP1(F, x))) => FORALL(/\y.and(X, AP1(F, y))) ;
    or(X, FORALL(/\x.AP1(F, x))) => FORALL(/\y.or(X, AP1(F, y))) ;
    and(FORALL(/\x.AP1(F, x)), X) => FORALL(/\y.and(AP1(F, y), X)) ;
    or(FORALL(/\x.AP1(F, x)), X) => FORALL(/\y.or(AP1(F, y), X)) ;
    not(FORALL(/\x.AP1(F, x))) => EXISTS(/\y.not(AP1(F, y))) ;
    and(X, EXISTS(/\x.AP1(F, x))) => EXISTS(/\y.and(X, AP1(F, y))) ;
    or(X, EXISTS(/\x.AP1(F, x))) => EXISTS(/\y.or(X, AP1(F, y))) ;
    and(EXISTS(/\x.AP1(F, x)), X) => EXISTS(/\y.and(AP1(F, y), X)) ;
    or(EXISTS(/\x.AP1(F, x)), X) => EXISTS(/\y.or(AP1(F, y), X)) ;
    not(EXISTS(/\x.AP1(F, x))) => FORALL(/\y.not(AP1(F, y))) ;
    AP1(F, X) => F X
]

  Interpretation: [

    J(and) = Lam[y0;y1].y0 + y1 + 3*y0*y1 ;
    J(EXISTS) = Lam[G0].2 + 3*G0(0) ;
    J(FORALL) = Lam[G0].2 + 3*G0(0) ;
    J(not) = Lam[y0].2*y0 ;
    J(or) = Lam[y0;y1].y0 + y1 + 3*y0*y1 ;
    J(AP1) = Lam[G0;y1].2 + 3*G0(0) + 3*G0(y1)

  ]

Removed: [

  and(X, FORALL(/\x.AP1(F, x))) => FORALL(/\y.and(X, AP1(F, y))) ;
  or(X, FORALL(/\x.AP1(F, x))) => FORALL(/\y.or(X, AP1(F, y))) ;
  and(FORALL(/\x.AP1(F, x)), X) => FORALL(/\y.and(AP1(F, y), X)) ;
  or(FORALL(/\x.AP1(F, x)), X) => FORALL(/\y.or(AP1(F, y), X)) ;
  not(FORALL(/\x.AP1(F, x))) => EXISTS(/\y.not(AP1(F, y))) ;
  and(X, EXISTS(/\x.AP1(F, x))) => EXISTS(/\y.and(X, AP1(F, y))) ;
  or(X, EXISTS(/\x.AP1(F, x))) => EXISTS(/\y.or(X, AP1(F, y))) ;
  and(EXISTS(/\x.AP1(F, x)), X) => EXISTS(/\y.and(AP1(F, y), X)) ;
  or(EXISTS(/\x.AP1(F, x)), X) => EXISTS(/\y.or(AP1(F, y), X)) ;
  not(EXISTS(/\x.AP1(F, x))) => FORALL(/\y.not(AP1(F, y))) ;
  AP1(F, X) => F X

]

